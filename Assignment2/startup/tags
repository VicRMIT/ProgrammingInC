!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOLEAN	shared.h	/^} BOOLEAN;$/;"	t	typeref:enum:__anon1
COMMAND_H	command.h	17;"	d
CT_DELETE	command.h	/^        CT_DELETE = 'd',$/;"	e	enum:command_type
CT_HELP	command.h	/^        CT_HELP = 'h',$/;"	e	enum:command_type
CT_INSERT	command.h	/^        CT_INSERT = 'i',$/;"	e	enum:command_type
CT_NEW	command.h	/^        CT_NEW = 'n',$/;"	e	enum:command_type
CT_PRINT	command.h	/^        CT_PRINT = 'p',$/;"	e	enum:command_type
CT_QUIT	command.h	/^        CT_QUIT = 'q'$/;"	e	enum:command_type
CT_READ	command.h	/^        CT_READ = 'r',$/;"	e	enum:command_type
CT_REPLACE	command.h	/^        CT_REPLACE = 't',$/;"	e	enum:command_type
CT_SEARCH	command.h	/^        CT_SEARCH = 's',$/;"	e	enum:command_type
CT_WRITE	command.h	/^        CT_WRITE = 'w',$/;"	e	enum:command_type
DECIMAL	helpers.h	18;"	d
EXTRACHARS	shared.h	25;"	d
FALSE	shared.h	/^        FALSE,$/;"	e	enum:__anon1
FILEIO_H	fileio.h	18;"	d
HELPERS_H	helpers.h	16;"	d
IND_DELETE	command.h	/^        IND_DELETE,$/;"	e	enum:command_index
IND_HELP	command.h	/^        IND_HELP,$/;"	e	enum:command_index
IND_INSERT	command.h	/^        IND_INSERT,$/;"	e	enum:command_index
IND_NEW	command.h	/^        IND_NEW,$/;"	e	enum:command_index
IND_PRINT	command.h	/^        IND_PRINT,$/;"	e	enum:command_index
IND_QUIT	command.h	/^        IND_QUIT$/;"	e	enum:command_index
IND_READ	command.h	/^        IND_READ,$/;"	e	enum:command_index
IND_REPLACE	command.h	/^        IND_REPLACE,$/;"	e	enum:command_index
IND_SEARCH	command.h	/^        IND_SEARCH,$/;"	e	enum:command_index
IND_WRITE	command.h	/^        IND_WRITE,$/;"	e	enum:command_index
INPUT	main.h	/^    PREPEND, INPUT$/;"	e	enum:arg_position
IR_FAILURE	repl.h	/^enum input_result { IR_FAILURE, IR_SUCCESS, IR_RTM };$/;"	e	enum:input_result
IR_RTM	repl.h	/^enum input_result { IR_FAILURE, IR_SUCCESS, IR_RTM };$/;"	e	enum:input_result
IR_SUCCESS	repl.h	/^enum input_result { IR_FAILURE, IR_SUCCESS, IR_RTM };$/;"	e	enum:input_result
LINELEN	shared.h	24;"	d
LINE_H	line.h	16;"	d
MAIN_H	main.h	14;"	d
NUMARGS	main.h	21;"	d
NUM_COMMANDS	command.h	50;"	d
PREPEND	main.h	/^    PREPEND, INPUT$/;"	e	enum:arg_position
REPL_H	repl.h	17;"	d
SHARED_H	shared.h	11;"	d
TRUE	shared.h	/^        TRUE$/;"	e	enum:__anon1
addnode	line.c	/^BOOLEAN addnode(struct line_list* lines, char currentLine[], struct line * data)$/;"	f
arg_position	main.h	/^enum arg_position$/;"	g
command	command.h	/^struct command {$/;"	s
command_delete	command.c	/^BOOLEAN command_delete(const char remainder[], struct line_list* thelist)$/;"	f
command_func	command.h	/^typedef BOOLEAN (*command_func)(const char[], struct line_list*);$/;"	t
command_help	command.c	/^BOOLEAN command_help(const char remainder[], struct line_list* thelist)$/;"	f
command_index	command.h	/^enum command_index {$/;"	g
command_insert	command.c	/^BOOLEAN command_insert(const char remainder[], struct line_list* thelist)$/;"	f
command_new	command.c	/^BOOLEAN command_new(const char remainder[], struct line_list* thelist)$/;"	f
command_print	command.c	/^BOOLEAN command_print(const char remainder[], struct line_list* thelist)$/;"	f
command_quit	command.c	/^BOOLEAN command_quit(const char remainder[], struct line_list* thelist)$/;"	f
command_read	command.c	/^BOOLEAN command_read(const char remainder[], struct line_list* thelist)$/;"	f
command_replace	command.c	/^BOOLEAN command_replace(const char remainder[], struct line_list* thelist)$/;"	f
command_search	command.c	/^BOOLEAN command_search(const char remainder[], struct line_list* thelist)$/;"	f
command_type	command.h	/^enum command_type {$/;"	g
command_write	command.c	/^BOOLEAN command_write(const char remainder[], struct line_list* thelist)$/;"	f
commands_init	command.c	/^void commands_init(struct command commands[])$/;"	f
data	line.h	/^        char* data;$/;"	m	struct:line
data	line.h	/^        struct line* data;$/;"	m	struct:line_node	typeref:struct:line_node::line
empty_string	helpers.c	/^BOOLEAN empty_string(const char string[])$/;"	f
error_print	repl.c	/^int error_print(const char format[], ...) {$/;"	f
file_name	line.h	/^        char* file_name;$/;"	m	struct:line_list
fold	helpers.c	/^void fold(char line[], long width)$/;"	f
func	command.h	/^        command_func func;$/;"	m	struct:command
head	line.h	/^        struct line_node* head;$/;"	m	struct:line_list	typeref:struct:line_list::line_node
input_result	repl.h	/^enum input_result { IR_FAILURE, IR_SUCCESS, IR_RTM };$/;"	g
len	line.h	/^        long len;$/;"	m	struct:line
line	line.h	/^struct line {$/;"	s
line_init	line.c	/^void line_init(struct line * line) {$/;"	f
line_list	line.h	/^struct line_list {$/;"	s
line_list_init	line.c	/^void line_list_init(struct line_list * line_list) {$/;"	f
line_node	line.h	/^struct line_node {$/;"	s
lineno	line.h	/^        long lineno;$/;"	m	struct:line
list_free	line.c	/^void list_free(struct line_list * line_list)$/;"	f
list_print	line.c	/^void list_print(struct line_list* line_list)$/;"	f
load_file	fileio.c	/^BOOLEAN load_file(const char fname[], struct line_list* thelist) {$/;"	f
main	examples/fred.c	/^int main(void)$/;"	f
main	main.c	/^int main(int argc, char* argv[]) {$/;"	f
next	line.h	/^        struct line_node* next;$/;"	m	struct:line_node	typeref:struct:line_node::line_node
normal_print	repl.c	/^int normal_print(const char format[], ...) {$/;"	f
num_lines	line.h	/^        long num_lines;$/;"	m	struct:line_list
print_usage	main.c	/^void print_usage(void) {$/;"	f
read_rest_of_line	repl.c	/^static void read_rest_of_line(void) {$/;"	f	file:
repl	repl.c	/^void repl(const struct command commands[], char filename[]) {$/;"	f
safe_calloc	safemalloc.c	/^void * safe_calloc(size_t nmem, size_t size, unsigned long line)$/;"	f
safe_malloc	safemalloc.c	/^void * safe_malloc(size_t size, unsigned long line)$/;"	f
safe_ptr_malloc	safemalloc.c	/^void safe_ptr_malloc(void ** memory, size_t size, unsigned long line)$/;"	f
safe_realloc	safemalloc.c	/^void * safe_realloc(void* memory, size_t newsize, unsigned long lineno)$/;"	f
safecalloc	safemalloc.h	19;"	d
safemalloc	safemalloc.h	18;"	d
safeptrmalloc	safemalloc.h	20;"	d
saferalloc	safemalloc.h	21;"	d
save_file	fileio.c	/^BOOLEAN save_file(const char fname[], const struct line_list* thelist) {$/;"	f
strdup	helpers.c	/^char* strdup(const char orig[])$/;"	f
strlen	examples/strlen.c	/^size_t strlen(const char string[])$/;"	f
type	command.h	/^        enum command_type type;$/;"	m	struct:command	typeref:enum:command::command_type
